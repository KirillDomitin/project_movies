import logging
import sqlite3
from dataclasses import asdict
from typing import List

import psycopg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


class SqliteEngine:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è, –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü, –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
    """

    def __init__(self, db_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite."""
        try:
            self.db_path = db_path
            self.connection = sqlite3.connect(self.db_path)
            self.connection.row_factory = sqlite3.Row
            self.cursor = self.connection.cursor()
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ SQLite: {e}")

    def get_tables(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            return [row[0] for row in self.cursor.fetchall()]
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
            return []

    def fetch_records(self, table_name: str, batch_size: int = 100):
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã SQLite –ø–∞—á–∫–∞–º–∏.
        :param table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
        :param batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞.
        """
        try:
            query = f"SELECT * FROM {table_name};"
            self.cursor.execute(query)
            while True:
                batch = self.cursor.fetchmany(batch_size)
                if not batch:
                    break
                yield batch
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {table_name}: {e}")

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite."""
        try:
            self.cursor.close()
            self.connection.close()
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è SQLite: {e}")


class PostgresEngine:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è, –æ—á–∏—â–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã, –≤—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
    """

    def __init__(self, dsn: dict):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
        try:
            self.connection = psycopg.connect(**dsn)
            self.cursor = self.connection.cursor()
            self.inserted_rows = 0  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        except psycopg.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}")

    def clear_table(self, table_name: str):
        """
        –û—á–∏—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã PostgreSQL.
        :param table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
        """
        try:
            self.cursor.execute(
                f"TRUNCATE TABLE {table_name} RESTART IDENTITY CASCADE;"
            )
            self.connection.commit()
        except psycopg.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")

    def insert_data(self, table_name: str, data: List):
        """
        –í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É PostgreSQL.
        :param table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
        :param data: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (dataclass –æ–±—ä–µ–∫—Ç–æ–≤) –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.
        """
        if not data:
            return

        try:
            columns = asdict(data[0]).keys()
            columns_str = ", ".join(columns)
            values_str = ", ".join([f"%s" for _ in columns])
            query = f"INSERT INTO {table_name} ({columns_str}) VALUES ({values_str})"
            batch = [tuple(asdict(d)[col] for col in columns) for d in data]
            self.cursor.executemany(query, batch)
            self.connection.commit()
            self.inserted_rows += len(batch)
        except psycopg.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ {table_name}: {e}")
            self.connection.rollback()  # üî• –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    def get_inserted_rows_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
        return self.inserted_rows

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
        try:
            logging.info(f"–í—Å–µ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {self.inserted_rows}")
            self.cursor.close()
            self.connection.close()
        except psycopg.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è PostgreSQL: {e}")
